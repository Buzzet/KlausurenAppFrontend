/**
 * KlausurenService
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Klausur } from '../model/klausur';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class KlausurenControllerService {

    protected basePath = 'http://klausuren-app.de:8201';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param semester 
     * @param studiengang 
     * @param jahr 
     * @param modul 
     * @param prof 
     * @param fileArray 
     * @param uploadedFrom 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addKlausurForm(semester?: number, studiengang?: string, jahr?: string, modul?: string, prof?: string, fileArray?: Blob, uploadedFrom?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public addKlausurForm(semester?: number, studiengang?: string, jahr?: string, modul?: string, prof?: string, fileArray?: Blob, uploadedFrom?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public addKlausurForm(semester?: number, studiengang?: string, jahr?: string, modul?: string, prof?: string, fileArray?: Blob, uploadedFrom?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public addKlausurForm(semester?: number, studiengang?: string, jahr?: string, modul?: string, prof?: string, fileArray?: Blob, uploadedFrom?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {








        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (semester !== undefined) {
            formParams = formParams.append('semester', <any>semester) as any || formParams;
        }
        if (studiengang !== undefined) {
            formParams = formParams.append('studiengang', <any>studiengang) as any || formParams;
        }
        if (jahr !== undefined) {
            formParams = formParams.append('jahr', <any>jahr) as any || formParams;
        }
        if (modul !== undefined) {
            formParams = formParams.append('modul', <any>modul) as any || formParams;
        }
        if (prof !== undefined) {
            formParams = formParams.append('prof', <any>prof) as any || formParams;
        }
        if (fileArray !== undefined) {
            formParams = formParams.append('fileArray', <any>fileArray) as any || formParams;
        }
        if (uploadedFrom !== undefined) {
            formParams = formParams.append('uploadedFrom', <any>uploadedFrom) as any || formParams;
        }

        return this.httpClient.request<string>('post',`${this.basePath}/klausur/hochladen`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param studiengang 
     * @param semester 
     * @param modul 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllKlausurenByStudiengangAndSemesterAndModul(studiengang: string, semester: number, modul: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Klausur>>;
    public getAllKlausurenByStudiengangAndSemesterAndModul(studiengang: string, semester: number, modul: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Klausur>>>;
    public getAllKlausurenByStudiengangAndSemesterAndModul(studiengang: string, semester: number, modul: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Klausur>>>;
    public getAllKlausurenByStudiengangAndSemesterAndModul(studiengang: string, semester: number, modul: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (studiengang === null || studiengang === undefined) {
            throw new Error('Required parameter studiengang was null or undefined when calling getAllKlausurenByStudiengangAndSemesterAndModul.');
        }

        if (semester === null || semester === undefined) {
            throw new Error('Required parameter semester was null or undefined when calling getAllKlausurenByStudiengangAndSemesterAndModul.');
        }

        if (modul === null || modul === undefined) {
            throw new Error('Required parameter modul was null or undefined when calling getAllKlausurenByStudiengangAndSemesterAndModul.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Klausur>>('get',`${this.basePath}/klausur/klausuren/${encodeURIComponent(String(studiengang))}/${encodeURIComponent(String(semester))}/${encodeURIComponent(String(modul))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param studiengang 
     * @param semester 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllModuleByStudiengangAndSemester(studiengang: string, semester: number, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public getAllModuleByStudiengangAndSemester(studiengang: string, semester: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public getAllModuleByStudiengangAndSemester(studiengang: string, semester: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public getAllModuleByStudiengangAndSemester(studiengang: string, semester: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (studiengang === null || studiengang === undefined) {
            throw new Error('Required parameter studiengang was null or undefined when calling getAllModuleByStudiengangAndSemester.');
        }

        if (semester === null || semester === undefined) {
            throw new Error('Required parameter semester was null or undefined when calling getAllModuleByStudiengangAndSemester.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<string>>('get',`${this.basePath}/klausur/module/${encodeURIComponent(String(studiengang))}/${encodeURIComponent(String(semester))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param studiengang 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllSemestersByStudiengang(studiengang: string, observe?: 'body', reportProgress?: boolean): Observable<Array<number>>;
    public getAllSemestersByStudiengang(studiengang: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<number>>>;
    public getAllSemestersByStudiengang(studiengang: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<number>>>;
    public getAllSemestersByStudiengang(studiengang: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (studiengang === null || studiengang === undefined) {
            throw new Error('Required parameter studiengang was null or undefined when calling getAllSemestersByStudiengang.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<number>>('get',`${this.basePath}/klausur/semester/${encodeURIComponent(String(studiengang))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllStudiengaenge(observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public getAllStudiengaenge(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public getAllStudiengaenge(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public getAllStudiengaenge(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<string>>('get',`${this.basePath}/klausur/studiengaenge`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getKlausur(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getKlausur(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getKlausur(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getKlausur(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getKlausur.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/klausur/anzeigen/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSemester(observe?: 'body', reportProgress?: boolean): Observable<Array<number>>;
    public getSemester(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<number>>>;
    public getSemester(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<number>>>;
    public getSemester(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<number>>('get',`${this.basePath}/klausur/semester`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param studiengang 
     * @param modul 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getYears(studiengang: string, modul: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Klausur>>;
    public getYears(studiengang: string, modul: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Klausur>>>;
    public getYears(studiengang: string, modul: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Klausur>>>;
    public getYears(studiengang: string, modul: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (studiengang === null || studiengang === undefined) {
            throw new Error('Required parameter studiengang was null or undefined when calling getYears.');
        }

        if (modul === null || modul === undefined) {
            throw new Error('Required parameter modul was null or undefined when calling getYears.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Klausur>>('get',`${this.basePath}/klausur/years/${encodeURIComponent(String(studiengang))}/${encodeURIComponent(String(modul))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public test(observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public test(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public test(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public test(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<string>>('get',`${this.basePath}/klausur/test`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
